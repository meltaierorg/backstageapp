app:
  title: Contoso Backstage - Internal Self Service Platform
  baseUrl: http://localhost:7007

organization:
  name: Contoso

backend:
  auth:
    environment: development
    # see https://backstage.io/docs/auth/ to learn about auth providers
    providers:
      # See https://backstage.io/docs/auth/guest/provider
      guest: {}
      
      microsoft:
        development:
          clientId: ${AZURE_CLIENT_ID}
          clientSecret: ${AZURE_CLIENT_SECRET}
          tenantId: ${AZURE_TENANT_ID}
          domainHint: ${AZURE_TENANT_ID}
          additionalScopes:
            - Mail.Send

      github:
        development:
          clientId: ${AUTH_GITHUB_CLIENT_ID}
          clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}

  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:8007
  listen:
    port: 8007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:7007
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    client: better-sqlite3
    connection: ':memory:'
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  github:
    - host: github.com
      # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
      # about setting up the GitHub integration here: https://backstage.io/docs/integrations/github/locations#configuration
      token: ${GITHUB_TOKEN}
    ### Example for how to add your GitHub Enterprise instance using the API:
    # - host: ghe.example.net
    #   apiBaseUrl: https://ghe.example.net/api/v3
    #   token: ${GHE_TOKEN}

proxy:
  ### Example for how to add a proxy endpoint for the frontend.
  ### A typical reason to do this is to handle HTTPS and CORS for internal services.
  # endpoints:
  #   '/test':
  #     target: 'https://example.com'
  #     changeOrigin: true

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'docker' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.
 



auth:
  environment: development
  # see https://backstage.io/docs/auth/ to learn about auth providers
  providers:
    # See https://backstage.io/docs/auth/guest/provider
    guest: {}

    microsoft:
      development:
        clientId: ${AZURE_CLIENT_ID}
        clientSecret: ${AZURE_CLIENT_SECRET}
        tenantId: ${AZURE_TENANT_ID}
        domainHint: ${AZURE_TENANT_ID}
        additionalScopes:
          - Mail.Send
    github:
        development:
          clientId: ${AUTH_GITHUB_CLIENT_ID}
          clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}




scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location]
  locations:
    # Load Azure Tenants Metadata to Backstage
    - type: file
      target: ../../entities/azureTenants.yaml

    # Load Azure Management Groups Related Metadata to Backstage
    - type: file
      target: ../../entities/azureManagementGroups.yaml

    # Load Azure Subscriptions Metadata
    - type: file
      target: ../../entities/azureSubscriptions.yaml

    # Load Azure Subscriptions Metadata
    - type: file
      target: ../../entities/azureResourceGroups.yaml

    # Load Azure VNets Metadata
    - type: file
      target: ../../entities/azureVnets.yaml

    # Load Azure Sybnets Metadata
    - type: file
      target: ../../entities/azureSubnets.yaml


    # Load Azure Keyvault Metadata
    - type: file
      target: ../../entities/azureKeyvaults.yaml

    # Load Azure Credentials Metadata
    - type: file
      target: ../../entities/azureCredentials.yaml



    # Load Example Service Template - 
    - type: file
      target: ../../serviceTemplates/azure-infra/template.yaml
      rules:
        - allow: [Template]



  providers:
    microsoftGraphOrg:
      default:
        clientId: ${AZURE_CLIENT_ID}
        clientSecret: ${AZURE_CLIENT_SECRET}
        tenantId: ${AZURE_TENANT_ID}
        schedule:
          frequency: PT1H
          timeout: PT50M
    githubOrg:
      id: production
      githubUrl: https://github.com
      orgs: ['meltaierorg']
      schedule:
        initialDelay: { seconds: 30 }
        frequency: { hours: 1 }
        timeout: { minutes: 50 }


