apiVersion: scaffolder.backstage.io/v1beta3
# https://backstage.io/docs/features/software-catalog/descriptor-format#kind-template
kind: Template
metadata:
  name: azure-vm-deployment-template
  title: Azure VM Deployment Template
  description: An example template for deploying a Virtual Machine from a template.
spec:
  owner: group:grp-platform-team
  type: azure-infra

  # These parameters are used to generate the input form in the frontend, and are
  # used to gather input data for the execution of the template.
  parameters:

    - title: Application Information
      required:
        - Cloud
        - appName
        - owner
        - description
        - environment
        - region
      properties:
       
        Cloud:
          title: Cloud
          type: string
          description: Cloud Provider
          enum:
            - Azure
          
        appName:
          title: Name
          type: string
          description: Unique name of the Application
          ui:autofocus: true
        
        owner:
          title: Owner
          type: string
          description: Owner of the Application
          ui:autofocus: true
          ui:field: OwnerPicker
          ui:options:
            catalogFilter:
              - kind: Group
            allowArbitraryValues: false

        description:
          title: Description
          type: string
          description: Short Description of the Application
          ui:autofocus: true

        
        environment:
          title: Environment
          type: string
          description: Environment of the Application
          enum:
            - Sandbox
            - Test

        region:
          title: Region
          type: string
          description: Region of the Application
          enum:
            - australiaeast

    - title: Name of Target Repository
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
            allowedOrganizations:
              - meltaierorg
            allowedOwners:
              - meltaierorg
            requestUserCredentials:
              secretsKey: USER_OAUTH_TOKEN
              additionalScopes:
                github:
                  - workflow
                  - repo
                  


    - title: Azure Bicep Registry
      required:
        - BicepRegistry
      properties:
        BicepRegistry:
          title: Bicep Registry Name
          type: string
          description: Name of Azure Bicep Registry
          ui:options:
            allowArbitraryValues: false
          enum:
            - br:bicepfactory.azurecr.io/bicep/classic-az-infra:latest

    - title: Azure Cloud Credentials
      required:
        - servicePrincipal
      properties:
        azureTenant:
          title: Azure Tenant Name
          type: string
          description: Name of Azure Tenant
          ui:field: EntityPicker
          ui:options:
            allowArbitraryValues: false
            catalogFilter:
              - kind: Component
                spec.type: azureTenant
        servicePrincipal:
          title: Service Principal Client ID
          type: string
          description: Service Principal Client ID
          ui:field: EntityPicker
          ui:options:
            allowArbitraryValues: false
            catalogFilter:
              - kind: Component
                spec.type: servicePrincipal

        servicePrincipalSecret:
          title: Service Principal Secret
          type: string
          description: Service Principal Secret
          ui:field: Secret


    - title: Azure Cloud and Virtual Network Configuration
      required:
        - subscription
        - resourceGroup
        - virtualNetwork
        - subnet

      properties:
        subscription:
          title: Subscription Name
          type: string
          description: Name of Azure Subscription
          ui:field: EntityPicker
          ui:options:
            allowArbitraryValues: false
            catalogFilter:
              - kind: Component
                spec.type: subscription

        resourceGroup:
          title: Resource Group Name
          type: string
          description: Prefix for Resource Group Name
          ui:field: EntityPicker
          ui:autofocus: true
          ui:options:
            allowArbitraryValues: false
            catalogFilter:
              - kind: Component
                spec.type: resourcegroup

        virtualNetwork:
          title: Virtual Network Name
          type: string
          description: Name of Virtual Network
          ui:field: EntityPicker
          ui:options:
            allowArbitraryValues: false
            catalogFilter:
              - kind: Component
                spec.type: virtualNetwork
        
        subnet:
          title: Subnet Name
          type: string
          description: Name of Subnet
          ui:field: EntityPicker
          ui:options:
            allowArbitraryValues: false
            catalogFilter:
              - kind: Component
                spec.type: subnet



    - title: Azure Virtual Machine Configuration
      required:
        - vmprefix
        - count
        - size
        - keyVaultName
        - vmAdminBreakGlassSecret
        - keyvaultResourceGroup
      properties:

        vmprefix:
          title: Virtual Machine Prefix
          type: string
          description: Prefix for Virtual Machine Name
          ui:autofocus: true

        count:
          title: Number of Virtual Machines
          type: number
          description: Number of Virtual Machines
          ui:options:
            allowArbitraryValues: false
          enum:
            - 1
            - 2
            - 3

        size:
          title: Virtual Machine Size
          type: string
          description: Name of Virtual Network
          ui:autofocus: true
          enum:
            - Standard_D4ads_v5

        keyVaultName:
          title: Name of Keyvault to be used for VM Admin Credentials
          type: string
          description: Name of Keyvault to be used for VM Admin Credentials
          ui:autofocus: true
          ui:field: EntityPicker
          ui:options:
            allowArbitraryValues: false
            catalogFilter:
              - kind: Component
                spec.type: keyvault

        keyvaultResourceGroup:
          title: Resource Group of Keyvault
          type: string
          description: Resource Group of Keyvault
          ui:autofocus: true
          ui:field: EntityPicker
          ui:options:
            allowArbitraryValues: false
            catalogFilter:
              - kind: Component
                spec.type: resourceGroup

        vmAdminBreakGlassSecret:
          title: Virtual Machine VMAdmin User Break Glass Secret Name
          type: string
          description: Name of KeyVault Secret
          ui:autofocus: true
          ui:field: EntityPicker
          ui:options:
            allowArbitraryValues: false
            catalogFilter:
              - kind: Component
                spec.type: keyvaultsecret

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Each step executes an action, in this case one templates files into the working directory.
    - id: catalogFetchAzureClientId
      name: Fetch Azure Credential Info
      action: catalog:fetch
      input:
        entityRef: ${{ parameters.servicePrincipal }}

    - id: catalogFetchAzureSubId
      name: Fetch Azure Subscription Info
      action: catalog:fetch
      input:
        entityRef: ${{ parameters.subscription }}
    
    - id: catalogFetchAzureTenantId
      name: Fetch Azure Tenant Info
      action: catalog:fetch
      input:
        entityRef: ${{ parameters.azureTenant }}

    - id: fetch-base
      name: Fetching Infrastructure Repository Template
      action: fetch:template
      input:
        url: ./content
        copyWithoutRender: 
          - '.github/workflows/deploy-bicep.yml'
        values:
          appName: ${{ parameters.appName }}
          subscription: ${{ parameters.subscription | parseEntityRef | pick('name') }}
          resourceGroup: ${{ parameters.resourceGroup | parseEntityRef | pick('name') }}
          virtualNetwork: ${{ parameters.virtualNetwork | parseEntityRef | pick('name')}}
          subnet: ${{ parameters.subnet | parseEntityRef | pick('name')}}
          count: ${{ parameters.count }}
          size: ${{ parameters.size }}
          BicepRegistry: ${{ parameters.BicepRegistry }}
          owner: ${{ parameters.owner | parseEntityRef | pick('name') }}
          description: ${{ parameters.description }}
          environment: ${{ parameters.environment }}
          region: ${{ parameters.region }}
          keyVaultName: ${{ parameters.keyVaultName | parseEntityRef | pick('name')}}
          keyvaultResourceGroup: ${{ parameters.keyvaultResourceGroup | parseEntityRef | pick('name')}}
          vmAdminBreakGlassSecret: ${{ parameters.vmAdminBreakGlassSecret | parseEntityRef | pick('name')}}
          vmprefix: ${{ parameters.vmprefix }}
          repoSlug: ${{ parameters.repoUrl | projectSlug }}


    # This step publishes the contents of the working directory to GitHub.
    - id: publish
      name: Publish New Repository and Secrets
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: Infrastructure Repository for ${{ parameters.appName }}
        repoUrl: ${{ parameters.repoUrl }}
        token: ${{ secrets.USER_OAUTH_TOKEN }}
        protectDefaultBranch: true
        collaborators:
          - access: admin
            team: ${{ parameters.owner }}
        secrets:
          AZURE_CLIENT_ID: ${{ steps['catalogFetchAzureClientId'].output.entity.metadata.annotations | pick('azure.com/clientId') }}
          AZURE_CLIENT_SECRET: ${{ secrets.servicePrincipalSecret }}
          AZURE_SUBSCRIPTION_ID: ${{ steps['catalogFetchAzureSubId'].output.entity.metadata.annotations | pick('azure.com/subscriptionId') }}
          AZURE_TENANT_ID: ${{ steps['catalogFetchAzureTenantId'].output.entity.metadata.annotations | pick('azure.com/tenantId') }}
        repoVariables:
          someVar: 'add Env Var Value Here'



    - id: createRepoEnvironment
      name: Create Github Repository Environments
      action: github:environment:create
      input:
        repoUrl: ${{ parameters.repoUrl }}
        #repoUrl: ${{ parameters.repoUrl }}
        name: Sandbox
        token: ${{ secrets.USER_OAUTH_TOKEN }}

    - id: github-action
      name: Trigger GitHub Action
      action: github:actions:dispatch
      input:
        workflowId: deploy-bicep.yml
        repoUrl: ${{ parameters.repoUrl }}
        token: ${{ secrets.USER_OAUTH_TOKEN }}
        branchOrTagName: 'master'
        workflowInputs:
          Subscription: ${{ parameters.subscription | parseEntityRef | pick('name') }}
          appName: ${{ parameters.appName }}
          Environment: ${{ parameters.environment }}
            
    # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'


  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
